from pyspark.sql import SparkSession
from pyspark.sql.functions import col
from pyspark.sql.types import (
    StructType,
    StructField,
    StringType,
    TimestampType,
    MapType,
)
from utils import extract_new_process_creation_logs
import logging
from mongodbfunctions import insertData
from libs import job_id_create_list ,df_to_dict


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),  # Logs to the console
        logging.FileHandler("app.log"),  # Logs to a file named 'app.log'
    ],
)

# Define schema
schema = StructType(
    [
        StructField("@timestamp", TimestampType(), True),
        StructField("@metadata", MapType(StringType(), StringType()), True),
        StructField(
            "event",
            StructType(
                [
                    StructField("kind", StringType(), True),
                    StructField("provider", StringType(), True),
                    StructField("outcome", StringType(), True),
                    StructField("action", StringType(), True),
                    StructField("created", TimestampType(), True),
                    StructField("code", StringType(), True),
                ]
            ),
            True,
        ),
        StructField(
            "log", StructType([StructField("level", StringType(), True)]), True
        ),
        StructField("message", StringType(), True),
        StructField(
            "host", StructType([StructField("name", StringType(), True)]), True
        ),
        StructField(
            "ecs", StructType([StructField("version", StringType(), True)]), True
        ),
        StructField(
            "agent",
            StructType(
                [
                    StructField("ephemeral_id", StringType(), True),
                    StructField("id", StringType(), True),
                    StructField("name", StringType(), True),
                    StructField("type", StringType(), True),
                    StructField("version", StringType(), True),
                ]
            ),
            True,
        ),
        StructField(
            "winlog",
            StructType(
                [
                    StructField("api", StringType(), True),
                    StructField("opcode", StringType(), True),
                    StructField("provider_guid", StringType(), True),
                    StructField("provider_name", StringType(), True),
                    StructField(
                        "process",
                        StructType(
                            [
                                StructField("pid", StringType(), True),
                                StructField(
                                    "thread",
                                    StructType([StructField("id", StringType(), True)]),
                                    True,
                                ),
                            ]
                        ),
                        True,
                    ),
                    StructField("channel", StringType(), True),
                    StructField("event_id", StringType(), True),
                    StructField("computer_name", StringType(), True),
                    StructField("task", StringType(), True),
                    StructField(
                        "event_data", MapType(StringType(), StringType()), True
                    ),
                    StructField("record_id", StringType(), True),
                    StructField("keywords", StringType(), True),
                ]
            ),
            True,
        ),
    ]
)


def detect_process_termination(df):
    termination_logs = df.filter(col("winlog.event_id") == "4689")
    if termination_logs.count() > 0:
        logging.info("Process termination detected.")
        termination_logs.show(truncate=False)
        return True
    else:
        logging.info("No process termination detected.")
        return False


def detect_suspicious_network_activity(df):
    network_logs = df.filter(col("winlog.event_id") == "5156")
    if network_logs.count() > 0:
        logging.info("Suspicious network activity detected.")
        network_logs.show()
        return True
    else:
        logging.info("No suspicious network activity detected.")
        return False


def detect_credential_access(df):
    credential_logs = df.filter(col("winlog.event_id") == "5379")
    if credential_logs.count() > 0:
        logging.info("Credential access detected.")
        credential_logs.show()
        return True
    else:
        logging.info("No credential access detected.")
        return False


def detect_object_access(df):
    object_access_logs = df.filter(col("winlog.event_id") == "4663")
    if object_access_logs.count() > 0:
        logging.info("Object access detected.")
        object_access_logs.show()
        return True
    else:
        logging.info("No object access detected.")
        return False


def detect_permission_changes(df):
    permission_logs = df.filter(col("winlog.event_id") == "4670")
    if permission_logs.count() > 0:
        logging.info("Permission changes detected.")
        permission_logs.show()
        return True
    else:
        logging.info("No permission changes detected.")
        return False


def detect_privilege_service(df):
    pservice_logs = df.filter(col("winlog.event_id") == "4673")
    if pservice_logs.count() > 0:
        logging.info("Privilege service detected.")
        pservice_logs.show()
        return True
    else:
        logging.info("No privilege service detected.")
        return False


def detect_group_membership(df):
    group_logs = df.filter(col("winlog.event_id") == "4627")
    if group_logs.count() > 0:
        logging.info("Group membership detected.")
        group_logs.show()
        return True
    else:
        logging.info("No group membership detected.")
        return False


def detect_sec_grp_membership(df):
    sec_grp_logs = df.filter(col("winlog.event_id") == "4799")
    if sec_grp_logs.count() > 0:
        logging.info("Security group membership detected.")
        sec_grp_logs.show()
        return True
    else:
        logging.info("No security group membership detected.")
        return False


def detect_attempt_to_duplicate_handle_to_object(df):
    handle_logs = df.filter(col("winlog.event_id") == "4690")
    # handle_logs.show()
    if handle_logs.count() > 0:
        logging.info("Attempt to duplicate handle to object detected.")
        handle_logs.show()
        return True
    else:
        logging.info("No attempt to duplicate handle to object detected.")
        return False


def correlate_logs(df):
    logging.info("Starting log correlation...")
    malware_detected = False  # Flag to track if any suspicious activity is detected

    if detect_process_termination(df):
        malware_detected = True
    if detect_credential_access(df):
        malware_detected = True
    if detect_object_access(df):
        malware_detected = True
    if detect_permission_changes(df):
        malware_detected = True
    if detect_suspicious_network_activity(df):
        malware_detected = True
    if detect_privilege_service(df):
        malware_detected = True
    if detect_group_membership(df):
        malware_detected = True
    if detect_sec_grp_membership(df):
        malware_detected = True
    if extract_new_process_creation_logs(df):
        malware_detected = True
    if detect_attempt_to_duplicate_handle_to_object(df):
        malware_detected = True

    if malware_detected:
        logging.info("Malware detected based on log correlation.")
        insertData(
            "report",
            job_id_create_list(
                "Malware_Detected",
                f"Detected potential malware activity",
                "Critical",
            ),
        )
    else:
        logging.info("No malware detected based on log correlation.")
        insertData(
            "report",
            job_id_create_list(
                "Malware_Detected",
                f"No malware activity detected",
                "Critical",
            ),
        )


# Main function to process logs
def checkmalware(df):
    correlate_logs(df)
